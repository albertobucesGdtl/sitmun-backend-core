import org.springframework.boot.gradle.plugin.SpringBootPlugin

apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

dependencyManagement {
  imports {
    mavenBom SpringBootPlugin.BOM_COORDINATES
  }
}

dependencies {
  implementation project(':common')
  implementation "org.hibernate:hibernate-core"
  implementation "org.reflections:reflections"
  implementation "info.picocli:picocli:${picocli_version}"
  implementation "org.reflections:reflections:${reflections_version}"
}

tasks.register('oracle8iSchemaExport', JavaExec) {
  mkdir 'src/main/sql/'
  classpath = sourceSets.main.runtimeClasspath
  mainClass = 'org.sitmun.cli.SitmunSchemaExport'
  args '-d', 'org.hibernate.dialect.Oracle8iDialect', '-f', 'src/main/sql/oracle8i.sql'
}

tasks.register('oracle9iSchemaExport', JavaExec) {
  mkdir 'src/main/sql/'
  classpath = sourceSets.main.runtimeClasspath
  mainClass = 'org.sitmun.cli.SitmunSchemaExport'
  args '-d', 'org.hibernate.dialect.Oracle9iDialect', '-f', 'src/main/sql/oracle9i.sql'
}

tasks.register('oracle10gSchemaExport', JavaExec) {
  mkdir 'src/main/sql/'
  classpath = sourceSets.main.runtimeClasspath
  mainClass = 'org.sitmun.cli.SitmunSchemaExport'
  args '-d', 'org.hibernate.dialect.Oracle10gDialect', '-f', 'src/main/sql/oracle10g.sql'
}


tasks.register('postgreSQLSchemaExport', JavaExec) {
  mkdir 'src/main/sql/'
  classpath = sourceSets.main.runtimeClasspath
  mainClass = 'org.sitmun.cli.SitmunSchemaExport'
  args '-d', 'org.hibernate.dialect.PostgreSQLDialect', '-f', 'src/main/sql/postgresql.sql'
}

tasks.register('h2SchemaExport', JavaExec) {
  mkdir 'src/main/sql/'
  classpath = sourceSets.main.runtimeClasspath
  mainClass = 'org.sitmun.cli.SitmunSchemaExport'
  args '-d', 'org.hibernate.dialect.H2Dialect', '-f', 'src/main/sql/h2.sql'
}

tasks.register('exportSchemas') {
  dependsOn([
    oracle8iSchemaExport,
    oracle9iSchemaExport,
    oracle10gSchemaExport,
    postgreSQLSchemaExport,
    h2SchemaExport])
}

jacocoTestReport {
  reports {
    xml.required.set(true)
  }
}

test.finalizedBy jacocoTestReport

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}
