////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Project deploy preprod
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

buildscript {
  dependencies {
    classpath 'com.oracle.database.jdbc:ojdbc10:19.22.0.0'
  }
}

import org.apache.tools.ant.taskdefs.condition.Os
import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
  id 'java'
  id 'org.springframework.boot'
  id 'io.spring.dependency-management'

  id 'org.liquibase.gradle'
  id 'com.google.cloud.tools.jib'
}

configurations {
  sqlRuntime
}

dependencyManagement {
  imports {
    mavenBom SpringBootPlugin.BOM_COORDINATES
  }
}

dependencies {

  implementation project(':common')
  implementation 'org.postgresql:postgresql'
  implementation 'com.oracle.database.jdbc:ojdbc8'

  liquibaseRuntime 'org.liquibase:liquibase-core:4.16.1'
  liquibaseRuntime 'org.liquibase:liquibase-groovy-dsl:3.0.2'
  liquibaseRuntime 'info.picocli:picocli:4.6.1'
  liquibaseRuntime 'org.postgresql:postgresql'
  liquibaseRuntime 'com.oracle.database.jdbc:ojdbc8'
}

liquibase {
  activities {
    main {
      changelogFile 'deploy/preprod/src/main/db/main.xml'
      url project.ext.database_url
      username project.ext.database_sitmun_user
      password project.ext.database_sitmun_password
      logLevel 'info'
    }
  }
}

jib {
  from {
    if (Os.isArch("aarch64")) {
      image = 'arm64v8/amazoncorretto:11'
    } else {
      image = 'amazoncorretto:11'
    }
  }
  to {
    image = "${name}:latest"
  }
  container {
    mainClass = 'org.sitmun.Application'
  }
}

springBoot {
  getMainClass().set("org.sitmun.Application")
}

bootJar {
  archiveFileName = "sitmun-backend-${archiveVersion.get()}.jar"
}

tasks.register('dropSitmunUser') {
  dependsOn 'prepareSql'
  group = 'sitmun'
  description = 'Drop the SITMUN User'
  doLast {
    def user = project.ext.database_admin_user
    def password = project.ext.database_admin_password
    def type = project.ext.database_type
    def script = layout.buildDirectory.file("db/drop-user-${type}.sql").get()
    sql(script, user, password)
  }
}

tasks.register('createSitmunUser') {
  dependsOn 'prepareSql'
  group = 'sitmun'
  description = 'Create the SITMUN User'
  doLast {
    def user = project.ext.database_admin_user
    def password = project.ext.database_admin_password
    def type = project.ext.database_type
    def script = layout.buildDirectory.file("db/create-user-${type}.sql").get()
    sql(script, user, password)
  }
}

tasks.register('prepareSql', Copy) {
  group = 'sitmun'
  description = 'Prepare the sql files'
  from layout.projectDirectory.dir('src/main/db/templates')
  expand(
    user: project.ext.database_sitmun_user,
    password: project.ext.database_sitmun_password,
    tablespace: project.ext.database_sitmun_tablespace
  )
  into layout.buildDirectory.dir('db')
}

def sql(scriptName, user, password) {
  ant.sql(
          classpath:  buildscript.configurations.classpath.asPath,
          driver: project.ext.database_driver,
          url: project.ext.database_url,
          userid: user,
          password: password,
          src: scriptName
  )
}
