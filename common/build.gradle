import org.springframework.boot.gradle.plugin.SpringBootPlugin

apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'io.freefair.lombok'
apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'

dependencyManagement {
  imports {
    mavenBom SpringBootPlugin.BOM_COORDINATES
  }
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-data-rest'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'

  implementation 'org.springframework.ldap:spring-ldap-core'
  implementation 'org.springframework.security:spring-security-ldap'
  testImplementation 'com.unboundid:unboundid-ldapsdk'

  testImplementation 'org.hamcrest:hamcrest'

  implementation "com.google.guava:guava:${guava_version}"

  implementation "com.querydsl:querydsl-jpa:${querydls_version}"

  implementation platform("com.squareup.okhttp3:okhttp-bom:${okhttp_version}")
  implementation 'com.squareup.okhttp3:okhttp'
  implementation 'com.squareup.okhttp3:logging-interceptor'

  implementation "org.json:json:${json_version}"
  implementation "io.jsonwebtoken:jjwt-api:${jjwt_version}"
  implementation "io.jsonwebtoken:jjwt-impl:${jjwt_version}"
  implementation "io.jsonwebtoken:jjwt-jackson:${jjwt_version}"

  implementation "org.springdoc:springdoc-openapi-common:${springdoc_openapi_version}"
  implementation "org.springdoc:springdoc-openapi-ui:${springdoc_openapi_version}"

  implementation "org.mapstruct:mapstruct:${mapstruct_version}"

  implementation "org.apache.commons:commons-lang3:${commons_lang3_version}"

  annotationProcessor 'javax.annotation:javax.annotation-api'
  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
  annotationProcessor "com.querydsl:querydsl-apt:${querydls_version}:jpa"
  annotationProcessor 'javax.persistence:javax.persistence-api'
  annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct_version}"

  testImplementation('org.springframework.boot:spring-boot-starter-test') {
    exclude group: 'com.vaadin.external.google', module: 'android-json'
  }
  testImplementation 'org.springframework.security:spring-security-test'
  testImplementation 'com.h2database:h2'
}

compileJava.inputs.files(processResources)

jacocoTestReport {
  reports {
    xml.required.set(true)
  }
}

test.finalizedBy jacocoTestReport

tasks.register("codeCoverageReport", JacocoReport) {
  jacocoClasspath = project(":common").configurations.jacocoAnt
  subprojects { subproject ->
    subproject.plugins.withType(JacocoPlugin).configureEach {
      subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask ->
        if (testTask.extensions.getByType(JacocoTaskExtension).isEnabled()) {
          sourceSets subproject.sourceSets.main
          executionData(testTask)
        } else {
          logger.warn('Jacoco extension is disabled for test task \'{}\' in project \'{}\'. this test task will be excluded from jacoco report.', testTask.getName(), subproject.getName())
        }
      }
      subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).forEach {
        rootProject.tasks.codeCoverageReport.dependsOn(it)
      }
    }
  }

}

rootProject.tasks.sonarqube {
  dependsOn(tasks.codeCoverageReport)
}
tasks.withType(Test).configureEach {
    useJUnitPlatform()
}
