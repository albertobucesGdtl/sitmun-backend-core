buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'io.github.swagger2markup:swagger2markup-spring-restdocs-ext:1.3.3'
    classpath 'io.github.swagger2markup:swagger2markup-gradle-plugin:1.3.3'
  }
}

plugins {
  id('java')
  id('org.springframework.boot') version '2.3.3.RELEASE'
  id('io.spring.dependency-management') version '1.0.10.RELEASE'

  id('maven-publish')
  id('jacoco')
  id('checkstyle')

  id('org.sonarqube') version '3.0'
  id('org.ajoberstar.git-publish') version '2.1.3'
  id('org.asciidoctor.jvm.convert') version '3.1.0'
  id('org.asciidoctor.jvm.pdf') version '3.1.0'

  id("com.github.johnrengelman.processes") version "0.5.0"
  id("org.springdoc.openapi-gradle-plugin") version "1.3.0"
}

def targetJavaVersion = JavaVersion.VERSION_1_8
sourceCompatibility = "${targetJavaVersion}"
targetCompatibility = "${targetJavaVersion}"

apply plugin: 'io.github.swagger2markup'

ext {
  asciiDocOutputDir = file("${buildDir}/asciidoc/generated")
  swaggerOutputDir = file("${buildDir}/swagger")
  snippetsOutputDir = file("${buildDir}/asciidoc/snippets")
}

group = 'org.sitmun'
if (project.hasProperty('customVersion')) {
  version = project.customVersion
} else {
  version = "${sitmun_version}"
}

repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-data-rest'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.security:spring-security-data'

  implementation 'org.liquibase:liquibase-core'

//  implementation "io.springfox:springfox-boot-starter:${springfox_swagger_version}"
  implementation 'org.springdoc:springdoc-openapi-ui:1.4.8'
  implementation 'org.springdoc:springdoc-openapi-data-rest:1.4.8'
  implementation 'org.springdoc:springdoc-openapi-security:1.4.8'
  implementation 'org.springdoc:springdoc-openapi-hateoas:1.4.8'

  implementation 'com.zaxxer:HikariCP'

  implementation "info.picocli:picocli:${picocli_version}"

  implementation "io.jsonwebtoken:jjwt:${jjwt_version}"

  implementation 'org.reflections:reflections:0.9.12'
  implementation 'com.h2database:h2'

  testImplementation 'com.h2database:h2'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.security:spring-security-test'
  testImplementation "org.assertj:assertj-core:${assertj_core_version}"
  testImplementation 'com.google.guava:guava:28.0-jre'
}

task checkJavaVersion {
  if (JavaVersion.current() < targetJavaVersion) {
    String message = """
ERROR: Java ${targetJavaVersion} JDK required but ${JavaVersion.current()} found. 
SOLUTION: 
  a) Point JAVA_HOME to a ${targetJavaVersion} JDK and then run gradle, or
  b) Run ./gradlew -Dorg.gradle.java.home=/path_to_jdk_${targetJavaVersion}_directory"""
    throw new GradleException(message)
  }
}

compileJava.dependsOn checkJavaVersion

publishing {
  repositories {
    maven {
      name = 'GitHubPackages'
      url = uri('https://maven.pkg.github.com/sitmun/sitmun-backend-core')
      credentials {
        username = project.findProperty('gpr.user') ?: System.getenv('USERNAME')
        password = project.findProperty('gpr.key') ?: System.getenv('GITHUB_API_KEY')
      }
    }
  }
  publications {
    gpr(MavenPublication) {
      from(components.java)
    }
  }
}

sonarqube {
  properties {
    property 'sonar.host.url', 'https://sonarcloud.io'
    property 'sonar.organization', 'sitmun'
  }
}


jacocoTestReport {
  reports {
    xml.enabled true
  }
}
test.finalizedBy jacocoTestReport
tasks['sonarqube'].dependsOn test

def cacheDir = project.hasProperty('cacheDir') ? project.properties.cacheDir : "${project.buildDir}"

task install(dependsOn: 'publishToMavenLocal')

clean {
  delete 'dist'
  delete "${cacheDir}"
}

//
// Documentation
//

convertSwagger2markup {
  if (!file("${swaggerOutputDir}/swagger.json").exists()) {
    dependsOn test
  }
  swaggerInput "${swaggerOutputDir}/swagger.json"
  outputDir asciiDocOutputDir
  config = [
    'swagger2markup.pathsGroupedBy'                          : 'TAGS',
    'swagger2markup.extensions.springRestDocs.snippetBaseUri': snippetsOutputDir.getAbsolutePath()]
}

asciidoctor {
// TODO fix generation of API documentation
// dependsOn convertSwagger2markup
  sourceDir = file('src/main/docs/asciidoc')
  sources {
    include 'index.adoc'
  }
  attributes = [
    doctype    : 'book',
    toc        : 'left',
    toclevels  : '2',
    numbered   : '',
    sectlinks  : '',
    sectanchors: '',
    hardbreaks : '',
    generated  : asciiDocOutputDir
  ]
}

javadoc {
  source = sourceSets.main.allJava
  classpath = configurations.compile
}

//
// Code quality tasks
//

checkstyle {
  toolVersion = '8.36'
  configFile = file("${project.rootDir}/checkstyle.xml")
}

//
// SQL tasks
//

task oracle8iSchemaExport(type: JavaExec) {
  mkdir 'src/main/sql/'
  classpath = sourceSets.main.runtimeClasspath
  main = 'org.sitmun.plugin.core.tools.SitmunSchemaExport'
  args '-d', 'org.hibernate.dialect.Oracle8iDialect', '-f', 'src/main/sql/oracle8i.sql'
}

task oracle9iSchemaExport(type: JavaExec) {
  mkdir 'src/main/sql/'
  classpath = sourceSets.main.runtimeClasspath
  main = 'org.sitmun.plugin.core.tools.SitmunSchemaExport'
  args '-d', 'org.hibernate.dialect.Oracle9iDialect', '-f', 'src/main/sql/oracle9i.sql'
}

task oracle10gSchemaExport(type: JavaExec) {
  mkdir 'src/main/sql/'
  classpath = sourceSets.main.runtimeClasspath
  main = 'org.sitmun.plugin.core.tools.SitmunSchemaExport'
  args '-d', 'org.hibernate.dialect.Oracle10gDialect', '-f', 'src/main/sql/oracle10g.sql'
}


task postgreSQLSchemaExport(type: JavaExec) {
  mkdir 'src/main/sql/'
  classpath = sourceSets.main.runtimeClasspath
  main = 'org.sitmun.plugin.core.tools.SitmunSchemaExport'
  args '-d', 'org.hibernate.dialect.PostgreSQLDialect', '-f', 'src/main/sql/postgresql.sql'
}

task h2SchemaExport(type: JavaExec) {
  mkdir 'src/main/sql/'
  classpath = sourceSets.main.runtimeClasspath
  main = 'org.sitmun.plugin.core.tools.SitmunSchemaExport'
  args '-d', 'org.hibernate.dialect.H2Dialect', '-f', 'src/main/sql/h2.sql'
}

task exportSchemas(dependsOn: [
  oracle8iSchemaExport,
  oracle9iSchemaExport,
  oracle10gSchemaExport,
  postgreSQLSchemaExport,
  h2SchemaExport])

openApi {
  outputDir.set(file(projectDir))
}